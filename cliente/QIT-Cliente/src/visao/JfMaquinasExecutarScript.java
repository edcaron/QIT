package visao;

import controle.ControleExecutarScript;
import controle.ITela;
import controle.ProxyTelas;
import controle.Util;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import modelo.ExecucaoScript;
import modelo.Maquina;
import modelo.MaquinasExecutarScript;
import modelo.Tela;
import modelo.Usuario;

public class JfMaquinasExecutarScript extends javax.swing.JFrame implements ITela {

    protected Usuario usuario;
    protected Tela tela;
    protected ProxyTelas proxy;
    protected ExecucaoScript execScript;
    protected ControleExecutarScript ces;
    protected Set<MaquinasExecutarScript> listaMaquinasExecutarScripts;    

    public JfMaquinasExecutarScript(Usuario usuario, int idMaquinasExecutarScript) {
        initComponents();
        this.setTitle("Resultados da Execução de Script");
        this.usuario = usuario;
        this.ces = new ControleExecutarScript();
        listaMaquinasExecutarScripts = new HashSet<>();
        this.tela = new Tela();

        tela.setId(101);
        execScript = new ExecucaoScript();

        qftfIdExecScript.setEditable(false);
        qftfIdExecScript.setDataType("integer");
        qftfIdExecScript.setNotNull(true);
        qftfIdExecScript.setMaxLenght(1000);

        jftfNomeExecScript.setEditable(false);
        jftfNomeExecScript.setFocusable(false);

        proxy = new ProxyTelas(this, this.usuario, this.tela);
//        Verificar permissao da operacao ler
        this.ler();

        if (idMaquinasExecutarScript != 0) {
            qftfIdExecScript.setText(idMaquinasExecutarScript + "");
            popularCampos();
        }
        controle.Util.definePadroesJFrame(this);    

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpCadastro = new javax.swing.JPanel();
        btCancelar1 = new javax.swing.JButton();
        btBuscarExecScript = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        qftfIdExecScript = new qitjftf.QITJFormattedTextField();
        jftfNomeExecScript = new javax.swing.JFormattedTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtMaquinas = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaResultadoExecucao = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jtDataRetorno = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jftfNomeScript = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jtNomeMaquinaSelecionada = new javax.swing.JTextField();
        jftfDataExecScript = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        btAtualzar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        btCancelar1.setText("Cancelar");
        btCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelar1ActionPerformed(evt);
            }
        });

        btBuscarExecScript.setText("Buscar");
        btBuscarExecScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarExecScriptActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Execução de Script:");

        qftfIdExecScript.setEditable(false);

        jftfNomeExecScript.setEnabled(false);

        jtMaquinas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Ip", "SO"
            }
        ));
        jtMaquinas.getTableHeader().setReorderingAllowed(false);
        jtMaquinas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtMaquinasMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jtMaquinas);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Resultado na Máquina Selecionada:");

        jtaResultadoExecucao.setColumns(20);
        jtaResultadoExecucao.setRows(5);
        jtaResultadoExecucao.setEnabled(false);
        jScrollPane1.setViewportView(jtaResultadoExecucao);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Data do retorno:");

        jtDataRetorno.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Script Executado:");

        jftfNomeScript.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Máquina:");

        jtNomeMaquinaSelecionada.setEnabled(false);

        jftfDataExecScript.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Data:");

        btAtualzar.setText("Atualizar");
        btAtualzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualzarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCadastroLayout = new javax.swing.GroupLayout(jpCadastro);
        jpCadastro.setLayout(jpCadastroLayout);
        jpCadastroLayout.setHorizontalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastroLayout.createSequentialGroup()
                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpCadastroLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btCancelar1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpCadastroLayout.createSequentialGroup()
                        .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpCadastroLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jpCadastroLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jtNomeMaquinaSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jtDataRetorno, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btAtualzar))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpCadastroLayout.createSequentialGroup()
                                        .addGap(373, 373, 373)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jftfDataExecScript))))
                            .addGroup(jpCadastroLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpCadastroLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jftfNomeScript, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpCadastroLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(qftfIdExecScript, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jftfNomeExecScript, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btBuscarExecScript)))
                        .addGap(0, 51, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpCadastroLayout.setVerticalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastroLayout.createSequentialGroup()
                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btBuscarExecScript)
                    .addComponent(jLabel3)
                    .addComponent(qftfIdExecScript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftfNomeExecScript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jftfNomeScript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jftfDataExecScript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtDataRetorno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jtNomeMaquinaSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancelar1)
                    .addComponent(btAtualzar))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpCadastro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btBuscarExecScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarExecScriptActionPerformed
        try {
            ExecucaoScript execScriptModal = new ExecucaoScript();
            ControleExecutarScript ctrlExecScript = new ControleExecutarScript();
            new JdlgGenerico(this, ctrlExecScript, execScriptModal, 1).setVisible(true);
        } catch (Exception e) {
            System.err.println("Erro " + e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btBuscarExecScriptActionPerformed

    private void btCancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelar1ActionPerformed
        int i = JOptionPane.showConfirmDialog(null, "Deseja cancelar esta operação?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            this.dispose();
        } else {
            System.out.println("i" + i);
        }
    }//GEN-LAST:event_btCancelar1ActionPerformed

    private void jtMaquinasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMaquinasMouseClicked
        if (jtMaquinas.getSelectedRowCount() != 0) {            
            int idRegistroSelecionado = (int) jtMaquinas.getValueAt(jtMaquinas.getSelectedRow(), 0);
            for (Iterator<MaquinasExecutarScript> it = listaMaquinasExecutarScripts.iterator(); it.hasNext();) {
                MaquinasExecutarScript mes = it.next();
                if (mes.getMaquina().getId() == idRegistroSelecionado && mes.getDtRetorno() != null) {
                    jtDataRetorno.setText(Util.dateToString(mes.getDtRetorno()));
                    jtaResultadoExecucao.setText(mes.getRetorno());
                    jtNomeMaquinaSelecionada.setText(mes.getMaquina().getHost());
                }else if(mes.getMaquina().getId() == idRegistroSelecionado){
                    jtaResultadoExecucao.setText("Ainda nenhum resultado obtido");
                    jtNomeMaquinaSelecionada.setText(mes.getMaquina().getHost());
                    jtDataRetorno.setText("");
                }
            }
        }
    }//GEN-LAST:event_jtMaquinasMouseClicked

    private void btAtualzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualzarActionPerformed
        if(jtMaquinas.getRowCount() >0){
            int linhaSelecionada = jtMaquinas.getSelectedRow();
            popularCampos();
            
        }
    }//GEN-LAST:event_btAtualzarActionPerformed

    @Override
    public boolean inserir() {
        boolean permissaoUser = proxy.inserir();

        System.out.println("Permisssao desse cara: " + permissaoUser);
        if (permissaoUser) {
            boolean retorno = ces.salvar(execScript);
            if (retorno) {
                JOptionPane.showMessageDialog(rootPane, "Operação Realizada com sucesso");
                this.limparCampos();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Não foi posssíel realizar esta operação, consulte o log de erros");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Você não possui permissão para realizar essa operação");
        }
        return true;
    }

    @Override
    public boolean ler() {
        boolean permissaoUser = proxy.ler();

        System.out.println("Permisssao desse cara: " + permissaoUser);
        if (permissaoUser) {
            this.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Você não possui permissão para acessar esta tela");
            this.dispose();
        }
        return true;
    }

    @Override
    public boolean editar() {
//        boolean permissaoUser = proxy.editar();
//
//        System.out.println("Permisssao desse cara: " + permissaoUser);
//        if (permissaoUser) {
//            boolean retorno = new SalaDAO().salvar(sala);
//            if (retorno) {
//                JOptionPane.showMessageDialog(rootPane, "Operação Realizada com sucesso");
//                this.limparCampos();
//            } else {
//                JOptionPane.showMessageDialog(rootPane, "Não foi posssíel realizar esta operação, consulte o log de erros");
//            }
//        } else {
//            JOptionPane.showMessageDialog(rootPane, "Você não possui permissão para realizar essa operação");
//        }
        return true;
    }

    @Override
    public boolean inativar() {
        return true;
    }

    @Override
    public void limparCampos() {
        this.execScript = null;
        this.execScript = new ExecucaoScript();
        jtDataRetorno.setText(null);
        jtaResultadoExecucao.setText("");
        jtMaquinas.clearSelection();
        listaMaquinasExecutarScripts.clear();
        popularTabela();
        controle.Formatacao.limparCampos(jpCadastro);
    }

    @Override
    public void popularCampos() {
        try {
            jtaResultadoExecucao.setText("");
            
            ExecucaoScript exsPesquisa = new ExecucaoScript();
            exsPesquisa.setId(Integer.parseInt(qftfIdExecScript.getText()));
            execScript = new ControleExecutarScript().consultar(exsPesquisa);

            jftfNomeScript.setText(execScript.getScript().getNome());
            jftfNomeExecScript.setText(execScript.getScript().getNome());
            listaMaquinasExecutarScripts = execScript.getMaquinasExecutarScripts();
            jftfDataExecScript.setText(Util.dateToString(execScript.getData()));

            this.popularTabela();
        } catch (Exception e) {
            System.err.println("Erro em popular campos  \n" + e);
        }
    }

    /**
     * Metodo para alterar os atributos do relacionamento Predio, no objeto sala
     *
     * @param id do predio
     * @param nome do predio
     */
    @Override
    public void setRelacionado1(String id, String nome) {
        try {
            qftfIdExecScript.setText(id);
            jftfNomeExecScript.setText(nome);
            popularCampos();
        } catch (Exception e) {
            System.err.println("Erro em setRelacionado1: " + e);
        }
    }

    @Override
    public void setRelacionado2(String id, String nome) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRelacionado3(String id, String nome) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    protected boolean verificaDuplicadosNoVetor(int id) {
        boolean retorno = false;
        for (MaquinasExecutarScript mes : listaMaquinasExecutarScripts) {
            Maquina maquina = mes.getMaquina();
            if (maquina.getId() == id) {
                retorno = true;
            }
        }
        return retorno;
    }

    protected void popularTabela() {
        Object[][] dadosTabela = null;
        //   System.out.println("populando tabela");
        try {
            int colunasTabela = 3;

            Object[] cabecalho = new Object[colunasTabela];

            cabecalho[0] = "Cód.";
            cabecalho[1] = "Nome";
            cabecalho[2] = "So";

            // cria matriz de acordo com n de registros da tabela
            dadosTabela = new Object[listaMaquinasExecutarScripts.size()][colunasTabela];

            int i = 0;
            for (Iterator<MaquinasExecutarScript> it = listaMaquinasExecutarScripts.iterator(); it.hasNext();) {
                Maquina maquina = it.next().getMaquina();
                dadosTabela[i][0] = maquina.getId();
                dadosTabela[i][1] = maquina.getNome();
                dadosTabela[i][2] = maquina.getSo();
                i++;
            }

            // configuracoes adicionais no componente tabela
            jtMaquinas.setModel(new DefaultTableModel(dadosTabela, cabecalho) {
                @Override
                // quando retorno for FALSE, a tabela nao é editavel
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

                @Override
                public Class getColumnClass(int column) {
                    return Object.class;
                }
            });

//             permite seleção de apenas uma linha da tabela
            jtMaquinas.setSelectionMode(0);
//Desabilitar arrastar e soltar
            jtMaquinas.getTableHeader().setReorderingAllowed(false);

            //alinha valores da coluna de valores para a direita 
            DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();
            DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
            DefaultTableCellRenderer direita = new DefaultTableCellRenderer();

            esquerda.setHorizontalAlignment(SwingConstants.LEFT);
            centralizado.setHorizontalAlignment(SwingConstants.CENTER);
            direita.setHorizontalAlignment(SwingConstants.RIGHT);

            jtMaquinas.getColumnModel().getColumn(0).setCellRenderer(esquerda);
            jtMaquinas.getColumnModel().getColumn(1).setCellRenderer(esquerda);
            jtMaquinas.getColumnModel().getColumn(2).setCellRenderer(esquerda);
            jtMaquinas.getTableHeader().setResizingAllowed(true);

            // redimensiona as colunas de uma tabela
            TableColumn column = null;
        } catch (Exception e) {
            System.err.println("Erro ao popular tabela: " + e + "\n" + e.getCause());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtualzar;
    private javax.swing.JButton btBuscarExecScript;
    private javax.swing.JButton btCancelar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JFormattedTextField jftfDataExecScript;
    private javax.swing.JFormattedTextField jftfNomeExecScript;
    private javax.swing.JFormattedTextField jftfNomeScript;
    private javax.swing.JPanel jpCadastro;
    private javax.swing.JTextField jtDataRetorno;
    private javax.swing.JTable jtMaquinas;
    private javax.swing.JTextField jtNomeMaquinaSelecionada;
    private javax.swing.JTextArea jtaResultadoExecucao;
    private qitjftf.QITJFormattedTextField qftfIdExecScript;
    // End of variables declaration//GEN-END:variables

}
